CREATE DATABASE DA_MYSQL_MODULE_4;

USE DA_MYSQL_MODULE_4;

CREATE TABLE Company(
CompanyID INT PRIMARY KEY,
CompanyName VARCHAR(45),
Street VARCHAR(45),
City VARCHAR(45),
State VARCHAR(2),
Zip VARCHAR(10));

INSERT INTO Company (CompanyID, CompanyName, Street, City, State, Zip)
VALUES 
(325, 'Tech Corp', '123 Elm St', 'San Francisco', 'CA', '94101'),
(326, 'Health Plus', '456 Oak Ave', 'New York', 'NY', '10001'),
(327, 'Urban Outfitters, Inc.', '789 Pine Blvd', 'Austin', 'TX', '73301'),
(328, 'Raval Textiles', '458 Maninagar', 'Ahmedabad', 'GU', '68342'),
(329, 'Toll Brothers', '854 Yonge', 'Toronto', 'On', '57642');

CREATE TABLE Contact(
ContactID INT PRIMARY KEY,
CompanyID INT ,
FirstName VARCHAR(45),
LastName VARCHAR(45),
Street VARCHAR(45),
City VARCHAR(45),
State VARCHAR(2),
Zip VARCHAR(10),
IsMain BOOLEAN,
Email VARCHAR(45),
Phone VARCHAR(12),
FOREIGN KEY (CompanyID) REFERENCES Company(CompanyID));

INSERT INTO Contact (ContactID, CompanyID, FirstName, LastName, Street, City, State, Zip, IsMain, Email, Phone)
VALUES 
(957, 325, 'Alice', 'Smith', '321 Birch St', 'San Francisco', 'CA', '94102', TRUE, 'alice.smith@techcorp.com', '5684238972'),
(958, 326, 'Bob', 'Johnson', '654 Maple St', 'New York', 'NY', '10002', TRUE, 'bob.johnson@healthplus.com', '9376482834'),
(959, 327, 'Charlie', 'Brown', '987 Cedar St', 'Austin', 'TX', '73302', FALSE, 'charlie.brown@urbanoutfitters.com', '5835421423'),
(960, 328, 'Tirth', 'Patel', 'C.T.M Cross Road', 'Ahmedabad', 'GU', '38002', TRUE, 'tirth138@ravaltextile.com', '3526586578'),
(961, 329, 'Manthan', 'Panchal', 'Hathijan', 'Ahmedabad', 'GU', '58224', TRUE, 'manthanpanchal125@tollbrothers.com', '5496275678');

CREATE TABLE Employee(
EmployeeID INT PRIMARY KEY,
FirstName VARCHAR(45),
LastName VARCHAR(45),
Salary DECIMAL(10,2),
HireDate DATE,
JobTitle VARCHAR(25),
Email VARCHAR(45),
Phone VARCHAR(12));

INSERT INTO Employee (EmployeeID, FirstName, LastName, Salary, HireDate, JobTitle, Email, Phone)
VALUES 
(101, 'Diana', 'Prince', 85000.50, '2020-05-15', 'Software Engineer', 'diana.prince@techcorp.com', '4567890123'),
(102, 'Bruce', 'Wayne', 120000.75, '2018-03-10', 'Project Manager', 'bruce.wayne@healthplus.com', '5678901234'),
(103, 'Clark', 'Kent', 95000.25, '2021-08-20', 'Trainer', 'clark.kent@edulearn.com', '6789012345'),
(104, 'Lesley', 'Bland', 72000.26, '2024-12-31', 'Marketing', 'lesley.bland@ravaltextile.com', '8121548354'),
(105, 'Peaky', 'Blinders', 586424.51, '2024-05-25', 'Quality Check', 'peaky.blinders845@tollbrothers.com', '5243769425');

CREATE TABLE ContactEmployee(
ContactEmployeeID INT PRIMARY KEY,
ContactID INT,
EmployeeID INT UNIQUE,
ContactDate DATE,
Description VARCHAR(100),
FOREIGN KEY (ContactID) REFERENCES Contact(ContactID),
FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID));

INSERT INTO ContactEmployee (ContactEmployeeID, ContactID, EmployeeID, ContactDate, Description)
VALUES 
(1001, 957, 101, '2023-11-15', 'Project discussion meeting'),
(1002, 958, 102, '2023-12-01', 'Contract negotiation'),
(1003, 959, 103, '2023-12-10', "Dianne Connor's contact event with Jack Lee"),
(1004, 960, 104, '2023-10-12', 'New contract meeting'),
(1005, 961, 105, '2023-09-11', 'New client price discussion');

UPDATE Employee 
SET Phone = '2155558800'
WHERE	
EmployeeID = 104;

UPDATE Company
SET CompanyName = 'Urban Outfitters'
WHERE 
CompanyID = 327;

DELETE FROM ContactEmployee
WHERE ContactEmployeeID = 1003;

SELECT 
Company.CompanyName,
Company.Street AS CompanyStreet,
Company.City AS CompanyCity,
Company.State AS CompanyState,
Contact.FirstName AS ContactFirstName,
Contact.LastName AS ContactLastName,
Contact.Email AS ContactEmail 
FROM 
Company
INNER JOIN 
Contact
ON 
Company.CompanyID = Contact.CompanyID;

SELECT 
Contact.FirstName AS ContactFirstName,
Contact.LastName AS ContactLastName,
Contact.Email AS ContactEmail,
ContactEmployee.ContactDate,
ContactEmployee.Description
FROM 
Contact
INNER JOIN 
ContactEmployee
ON 
Contact.ContactID = ContactEmployee.ContactID;

SELECT 
Employee.FirstName AS EmployeeFirstName,
Employee.LastName AS EmployeeLastName
FROM 
Employee
INNER JOIN 
ContactEmployee ON Employee.EmployeeID = ContactEmployee.EmployeeID
INNER JOIN 
Contact ON ContactEmployee.ContactID = Contact.ContactID
INNER JOIN 
Company ON Contact.CompanyID = Company.CompanyID
WHERE 
Company.CompanyName = 'Toll Brothers';

SELECT 
ContactEmployeeID,
ContactID,
EmployeeID,
DATE_FORMAT(ContactDate, '%M %d, %Y') AS FormattedDate,
Description
FROM 
ContactEmployee;

8. What is the significance of “%” and “_” operators in the LIKE statement? 
-> In SQL, the `LIKE` statement is used to search for a specified pattern in a column, and the `%` and `_` operators are wildcard characters that help define these patterns. 
Here's their significance:

:- `%` Operator
	- Purpose: Represents zero, one, or multiple characters.
	- Use: It is used when you want to match any sequence of characters, including an empty sequence.
		:- Example:
			- SELECT * FROM Employees WHERE Name LIKE 'J%';
			- Finds all employees whose names start with "J", such as "John", "Jane", or "Jack".
			- SELECT * FROM Products WHERE Description LIKE '%phone%';`
			- Finds all products whose descriptions contain the word "phone", such as "smartphone", "headphone", or "phone case".

:- `_` Operator
- Purpose: Represents a single character.
- Use: It is used when you want to match a single, specific character in a certain position.
	:- Example:
		- SELECT * FROM Employees WHERE Name LIKE 'J_n';`
		- Finds all employees whose names have "J" as the first letter, any single character as the second, and "n" as the third, such as "Jan" or "Jon".
		- SELECT * FROM Codes WHERE Code LIKE 'A_3';`
		- Finds codes like "A13", "AB3", or "AC3", where the first character is "A", the second is any character, and the third is "3".

:- Combining `%` and `_`
	- You can use both wildcards together in a `LIKE` statement to create complex patterns:
	- SELECT * FROM Files WHERE FileName LIKE 'Doc_%_2023%';`
	- Matches file names starting with "Doc_", followed by any single character, then "_2023", and possibly more characters after that.

These wildcards make the `LIKE` statement a powerful tool for flexible pattern matching in SQL queries.

9. Explain normalization in the context of databases.
-> Normalization in databases is the process of organizing data to reduce redundancy and improve data integrity. It involves dividing a database into smaller, related tables 
and defining relationships between them. This ensures efficient storage, minimizes duplicate data, and maintains consistency by following a set of rules called normal forms 
(e.g., 1NF, 2NF, 3NF). 

10. What does a join in MySQL mean?
-> In MySQL, a JOIN is used to combine rows from two or more tables based on a related column between them. It enables retrieving data that is spread across multiple tables by 
establishing relationships, such as INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN. 

11. What do you understand about DDL, DCL, and DML in MySQL?
:- DDL (Data Definition Language)
	- Defines the structure of the database (e.g., tables, schemas).
	- Examples: CREATE, ALTER, DROP, TRUNCATE.

:- DML (Data Manipulation Language)
	- Deals with data manipulation within tables.
	- Examples: SELECT, INSERT, UPDATE, DELETE.

:- DCL (Data Control Language)
	- Manages user permissions and access control.
	- Examples: GRANT, REVOKE.

12. What is the role of the MySQL JOIN clause in a query, and what are some common types of joins? 
-> The MySQL JOIN clause combines rows from two or more tables based on a related column, allowing retrieval of connected data.

:- Common Types of Joins:
	- INNER JOIN: Returns matching rows from both tables.
	- LEFT JOIN: Returns all rows from the left table and matching rows from the right.
	- RIGHT JOIN: Returns all rows from the right table and matching rows from the left.
	- FULL JOIN: Returns rows when there is a match in either table. (Not directly supported in MySQL; can be simulated).



Thank you for reviewing this assignment